# admin_handlers.py
from config import ADMIN_IDS
from database import get_interested_users, get_paid_users, get_message_history, add_message
from datetime import datetime

def register_admin_handlers(bot):
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in ADMIN_IDS

    @bot.message_handler(commands=['admin'])
    def admin_panel(message):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return

        admin_message = "üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n" \
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
                        "/users - —Å–ø–∏—Å–æ–∫ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" \
                        "/paid - —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" \
                        "/history [user_id] - –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n" \
                        "/reply [user_id] [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"

        bot.reply_to(message, admin_message)

    @bot.message_handler(commands=['users'])
    def list_interested_users(message):
        """–°–ø–∏—Å–æ–∫ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not is_admin(message.from_user.id):
            return

        users = get_interested_users()
        if not users:
            bot.reply_to(message, "–ù–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        response = "üë• –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for i, user in enumerate(users, 1):
            user_id, username, first_name, last_name, interested_at = user
            username_display = f"@{username}" if username else "–±–µ–∑ username"
            name_display = f"{first_name} {last_name}" if last_name else first_name
            response += f"{i}. {username_display} ({name_display}) - {interested_at[:10]}\n"

        bot.reply_to(message, response)

    @bot.message_handler(commands=['paid'])
    def list_paid_users(message):
        """–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not is_admin(message.from_user.id):
            return

        users = get_paid_users()
        if not users:
            bot.reply_to(message, "–ù–µ—Ç –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        response = "üí∞ –û–ø–ª–∞—Ç–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for i, user in enumerate(users, 1):
            user_id, username, first_name, last_name, paid_at = user
            username_display = f"@{username}" if username else "–±–µ–∑ username"
            name_display = f"{first_name} {last_name}" if last_name else first_name
            response += f"{i}. {username_display} ({name_display}) - {paid_at[:10]}\n"

        bot.reply_to(message, response)

    @bot.message_handler(commands=['history'])
    def show_message_history(message):
        """–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        if not is_admin(message.from_user.id):
            return

        parts = message.text.split()
        if len(parts) < 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /history [user_id]")
            return

        try:
            user_id = int(parts[1])
            history = get_message_history(user_id)

            if not history:
                bot.reply_to(message, f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
                return

            response = f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}:\n\n"
            for msg in history:
                sender_id, receiver_id, text, sent_at = msg
                direction = "‚Üí" if sender_id == user_id else "‚Üê"
                response += f"[{sent_at[:19]}] {direction} {text}\n\n"

            bot.reply_to(message, response[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")

    @bot.message_handler(commands=['reply'])
    def admin_reply(message):
        """–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not is_admin(message.from_user.id):
            return

        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply [user_id] [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
            return

        try:
            user_id = int(parts[1])
            reply_text = parts[2]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
            add_message(message.from_user.id, user_id, reply_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}")
                bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")

    @bot.message_handler(func=lambda message: not message.text.startswith('/') and 
                                      is_admin(message.from_user.id) and 
                                      len(message.text.split()) > 1)
    def handle_admin_message(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥"""
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–∏—Å–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π user_id), —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        parts = message.text.split(maxsplit=1)
        try:
            user_id = int(parts[0])
            reply_text = parts[1]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
            add_message(message.from_user.id, user_id, reply_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}")
                bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        except (ValueError, IndexError):
            # –≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–æ–∑–º–æ–∂–Ω–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç
            pass